from Crypto.Util.number import long_to_bytes, inverse

data = []
with open("output_manyprime.txt") as f:
    for line in f.readlines():
        data.append(int(line.strip().split(' = ')[1]))
n, e, ct = data

# /bin/bash python3 primefac.py n 
# or you can use sagemath
n_factorized = [13099895578757581201, 9282105380008121879, 10336650220878499841, 12973972336777979701, 14100640260554622013, 15669758663523555763, 12834461276877415051, 17281246625998849649, 11328768673634243077, 17174065872156629921, 9303850685953812323, 16656402470578844539, 11665347949879312361, 17138336856793050757, 14523070016044624039, 14963354250199553339, 11530534813954192171, 15824122791679574573, 11473665579512371723, 11492065299277279799, 10638241655447339831, 12132158321859677597, 14178869592193599187, 16898740504023346457, 11282698189561966721, 9389357739583927789, 15364597561881860737, 12955403765595949597, 11403460639036243901, 14278240802299816541, 13572286589428162097, 15998365463074268941]

WTF = 1
for i in n_factorized: WTF = WTF * (i - 1)

d = inverse(e, WTF)
print(long_to_bytes(pow(ct, d, n)).decode())

# Dont use small factor!!